version: '2.0'

services:

  basicstation:
    
    # Use pre-defined image
    image: dfelska/basicstation:latest
    
    # Or comment out image and build it yourself
    #build:
    #  context: .
    #  args:
    #    ARCH: amd64
    #    REMOTE_TAG: v2.0.6
    #    VARIANT: std

    container_name: basicstation
    restart: unless-stopped
    privileged: true         # set this to true or define the required devices to share with the container under the `devices` tag below
    network_mode: host       # required to read host interface MAC instead of virtual one, you don't need this if you set the GATEWAY_EUI manually

    #devices:
    #  - /dev/ttyACM0         # share the device where your concentrator is connected to or set privileged to true above
    #  - /dev/spidev0.0       # share the device where your concentrator is connected to or set privileged to true above
    #  - /dev/gpiochip0       # allow the container to access the GPIO (via gpiod) if using an SPI concentrator or set privileged to true above
    
    #volumes:
    #  - ./config:/app/config

    #environment:

      # To select your concentrator you have 3 options:
      # Option 1: set the model of the concentrator you are using (by RAK, SeeedStudio, IMST or MikroTik)
      # Option 2: set the Semtech's chip on it
      #MODEL: "RAK5146"
      #MODEL: "SX1303"
      MODEL: "SX1303"

      # The concentrator design is usually taken from the MODEL (see https://doc.sm.tc/station):
      # * V2 design was used with SX1301 and SX1308 concentrators with SPI interface
      # * PicoCell design defines SX1308-based concentrators with USB interface
      # * CoreCell design is in use with SX1302 and SX1303 concentrators, both SPI and USB interface
      # but in case you what to specify it you can using the DESIGN variable
      #DESIGN: "V2"
      #DESIGN: "PICOCELL"
      DESIGN: "CORECELL"

      # The interface the concentrator uses, defaults to "SPI"
      #INTERFACE: "USB"
      
      # These are the defaults:
      #USE_LIBGPIOD: 0
      #GW_RESET_GPIO: 17
      #GW_POWER_EN_GPIO: 0
      #GW_POWER_EN_LOGIC:1

      # If you have the concentrator connected to a different port
      # than the default one ("/dev/spidev0.0" for SPI or "/dev/ttyACM0" for USB)
      # you can define it this way:
      #DEVICE: "/dev/spidev0.1"
      #DEVICE: "/dev/ttyUSB0"

      # Problems with an SPI concentrator are sometimes related to the bus speed,
      # you can set a different one this way
      #SPI_SPEED: 8000000

      # The service will define the Gateway EUI based on a network interface: eth0, wlan0 or usb0.
      # If neither of these exist or you want it to use a different interface you can define the NIC this way:
      #GATEWAY_EUI_NIC: "enx00e04c68160f"

      # You can also set a custom Gateway EUI (8 bytes in hex format)
      # This is required if network_mode is not "host", otherwise the gateway
      # will get a different EUI every time the container is recreated.
      #GATEWAY_EUI: "1122334455667788"

      # The default LNS server is the European TTN server. 
      # If you still want to use TTN but a different region you can set it this way,
      # this will create the TC_URI and CUPS_URI URLs for the corresponding TTN server
      TTS_REGION: "nam1"

      # Tenant name if using The Things Cloud
      # This will create the TC_URI and CUPS_URI URLs for the corresponding server
      TTS_TENANT: "dfelska"

      # Server name indication (SNI) check, defaults to true.
      # Use it only to connect to private LNS/CUPS servers with self-signed certificates
      # Check https://github.com/xoseperez/basicstation/issues/4#issuecomment-1230138180
      # TLS_SNI: false

      # Force use CUPS protocol (regardless of TC_KEY existance below)
      #USE_CUPS: 0

      # Using LNS protocol: define a custom LNS server
      #TC_URI: "wss://lns.example.com:8887"

      # Using LNS protocol: if you use a server other than TTN, you will have to provide the certificate for that server.
      #TC_TRUST: "-----BEGIN CERTIFICATE----- MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA......"

      # Using LNS protocol: finally, you need to create a KEY for the gateway and provide it here:
      #TC_KEY: "NNSXS.SLOC764GN3....."

      # Using CUPS protocol: define a custom CUPS server
      #CUPS_URI: "https://lns.example.com:443"

      # Using CUPS protocol: if you use a server other than TTN, you will have to provide the certificate for that server.
      #CUPS_TRUST: "-----BEGIN CERTIFICATE----- MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA......"

      # Using CUPS protocol: finally, you need to create a KEY for the service to connect to the CUPS server.
      #CUPS_KEY: "NNSXS.SLOC764GN3....."

      # ------------------------------------------------
      # The Things Industries - Autoprovision
      # ------------------------------------------------

      # Gateway prefix to autogenerate IDs in TTI/TTN (defaults to "eui")
      #GATEWAY_PREFIX: "project"

      # Gateway ID to use when registering the gateway in TTI/TTN (defaults to "<GATEWAY_PREFIX>-<GATEWAY_EUI>")
      #GATEWAY_ID: "gw-test-01"

      # Gateway NAME to use when registering the gateway in TTI/TTN (defaults to <GATEWAY_ID>)
      #GATEWAY_NAME: "gw-test-01"

      # TTS username with privileges to provision a gateway
      TTS_USERNAME: "dfelska"

      # Personal key with privileges to provision a gateway
      # Required permissions:
      # * link as Gateway to a Gateway Server for traffic exchange, i.e. write uplink and read downlink
      # * view and edit gateway API keys
      # * edit basic gateway settings
      # * create a gateway under the user account
      #TTS_PERSONAL_KEY: "NNSXS.E2CK53N....."
      
      # The Things Stack frequency plan (https://www.thethingsindustries.com/docs/reference/frequency-plans/)
      TTS_FREQUENCY_PLAN_ID: "US_902_928_FSB_2"
